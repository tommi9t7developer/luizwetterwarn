{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./dax-data.service\";\nimport * as i2 from \"@angular/common\";\nexport class MainMenuComponent {\n  constructor(weatherService) {\n    this.weatherService = weatherService;\n    this.weatherImage = \"\";\n  }\n  ngOnInit() {\n    const latitude = 52.3745; // Latitude von Hannover\n    const longitude = 9.7386; // Längengrad von Hannover\n    this.weatherService.getWeatherForecast(latitude, longitude).subscribe(data => {\n      console.log(data); // Hier kannst du mit den erhaltenen Daten arbeiten\n      this.weatherData = data;\n      this.setPicture();\n    });\n  }\n  getHighestTemperature() {\n    if (this.weatherData && this.weatherData.hourly && this.weatherData.hourly.temperature_2m) {\n      const temperatures = this.weatherData.hourly.temperature_2m;\n      const highestTemperature = Math.max(...temperatures);\n      if (highestTemperature > 11) {\n        this.weatherImage = 'assets/IMG_0287.jpg';\n        return highestTemperature + \"°C Es ist Luiz zu HEISS\";\n      } else {\n        this.weatherImage = 'assets/IMG_8637.JPG';\n        return highestTemperature + \"°C : zwischen -100 und 10, alles gut\";\n      }\n    }\n    return \"No temperature data available\";\n  }\n  setPicture() {\n    const temperatures = this.weatherData.hourly.temperature_2m;\n    const highestTemperature = Math.max(...temperatures);\n    if (highestTemperature > 11) {\n      this.weatherImage = 'assets/IMG_0287.jpg';\n    } else {\n      this.weatherImage = 'assets/IMG_8637.JPG';\n    }\n  }\n}\n_class = MainMenuComponent;\n_class.ɵfac = function MainMenuComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.WeatherService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"main-menu\"]],\n  decls: 8,\n  vars: 5,\n  consts: [[\"alt\", \"Weather Image\", 3, \"src\"]],\n  template: function MainMenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Warn Luiz Weather Forecast for Hannover\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"img\", 0);\n      i0.ɵɵelementStart(5, \"pre\");\n      i0.ɵɵtext(6);\n      i0.ɵɵpipe(7, \"json\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"Highest Temperature of the Day: \", ctx.getHighestTemperature(), \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"src\", ctx.weatherImage, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 3, ctx.weatherData));\n    }\n  },\n  dependencies: [i2.JsonPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;AAaE,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAChC,IAAI,CAACC,YAAY,GAAG,EAAE;EACxB;EAEAC,QAAQ;IAEN,MAAMC,QAAQ,GAAG,OAAO,CAAC,CAAC;IAC1B,MAAMC,SAAS,GAAG,MAAM,CAAC,CAAC;IAE1B,IAAI,CAACJ,cAAc,CAACK,kBAAkB,CAACF,QAAQ,EAAEC,SAAS,CAAC,CAACE,SAAS,CAACC,IAAI,IAAG;MAC3EC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;MACnB,IAAI,CAACG,WAAW,GAAGH,IAAI;MACvB,IAAI,CAACI,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAC,qBAAqB;IACnB,IAAI,IAAI,CAACF,WAAW,IAAI,IAAI,CAACA,WAAW,CAACG,MAAM,IAAI,IAAI,CAACH,WAAW,CAACG,MAAM,CAACC,cAAc,EAAE;MACzF,MAAMC,YAAY,GAAG,IAAI,CAACL,WAAW,CAACG,MAAM,CAACC,cAAc;MAC3D,MAAME,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGH,YAAY,CAAC;MAEpD,IAAIC,kBAAkB,GAAG,EAAE,EAAE;QAC3B,IAAI,CAACf,YAAY,GAAG,qBAAqB;QACzC,OAAOe,kBAAkB,GAAG,yBAAyB;OACtD,MAAM;QACL,IAAI,CAACf,YAAY,GAAG,qBAAqB;QACzC,OAAOe,kBAAkB,GAAG,sCAAsC;;;IAGtE,OAAO,+BAA+B;EACxC;EAEAL,UAAU;IACR,MAAMI,YAAY,GAAG,IAAI,CAACL,WAAW,CAACG,MAAM,CAACC,cAAc;IAC3D,MAAME,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGH,YAAY,CAAC;IAEpD,IAAIC,kBAAkB,GAAG,EAAE,EAAE;MAC3B,IAAI,CAACf,YAAY,GAAG,qBAAqB;KAC1C,MAAM;MACL,IAAI,CAACA,YAAY,GAAG,qBAAqB;;EAE7C;;SA7CWH,iBAAiB;;mBAAjBA,MAAiB;AAAA;;QAAjBA,MAAiB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MAP1BC,0BAAI;MAAAA,uDAAuC;MAAAA,iBAAK;MAChDA,yBAAG;MAAAA,YAA6D;MAAAA,iBAAI;MACpEA,yBAAgD;MAChDA,2BAAK;MAAAA,YAAwB;;MAAAA,iBAAM;;;MAFhCA,eAA6D;MAA7DA,0FAA6D;MAC3DA,eAAoB;MAApBA,wDAAoB;MACpBA,eAAwB;MAAxBA,2DAAwB","names":["MainMenuComponent","constructor","weatherService","weatherImage","ngOnInit","latitude","longitude","getWeatherForecast","subscribe","data","console","log","weatherData","setPicture","getHighestTemperature","hourly","temperature_2m","temperatures","highestTemperature","Math","max","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Thomas.Koenig\\luizwetter\\src\\app\\mainmenu\\main-menu.component.ts"],"sourcesContent":["import { Component, OnInit, Injectable } from '@angular/core';\r\nimport { WeatherService } from './dax-data.service';  //service eventuell in Module: provider\r\n\r\n  @Component({\r\n    selector: 'main-menu',\r\n    template: `\r\n      <h2>Warn Luiz Weather Forecast for Hannover</h2>\r\n      <p>Highest Temperature of the Day: {{ getHighestTemperature() }}</p>\r\n      <img [src]=\"weatherImage\" alt=\"Weather Image\" />\r\n      <pre>{{ weatherData | json }}</pre>\r\n    `,\r\n    styles: []\r\n  })\r\n  export class MainMenuComponent implements OnInit {\r\n    weatherData: any;\r\n    weatherImage: string;\r\n  \r\n    constructor(private weatherService: WeatherService) {\r\n      this.weatherImage = \"\";\r\n    }\r\n  \r\n    ngOnInit(): void {\r\n      \r\n      const latitude = 52.3745; // Latitude von Hannover\r\n      const longitude = 9.7386; // Längengrad von Hannover\r\n  \r\n      this.weatherService.getWeatherForecast(latitude, longitude).subscribe(data => {\r\n        console.log(data); // Hier kannst du mit den erhaltenen Daten arbeiten\r\n        this.weatherData = data;\r\n        this.setPicture();\r\n      });\r\n    }\r\n  \r\n    getHighestTemperature(): string {\r\n      if (this.weatherData && this.weatherData.hourly && this.weatherData.hourly.temperature_2m) {\r\n        const temperatures = this.weatherData.hourly.temperature_2m;\r\n        const highestTemperature = Math.max(...temperatures);\r\n        \r\n        if (highestTemperature > 11) {\r\n          this.weatherImage = 'assets/IMG_0287.jpg';\r\n          return highestTemperature + \"°C Es ist Luiz zu HEISS\";\r\n        } else {\r\n          this.weatherImage = 'assets/IMG_8637.JPG';\r\n          return highestTemperature + \"°C : zwischen -100 und 10, alles gut\";\r\n        }\r\n      }\r\n      return \"No temperature data available\";\r\n    }\r\n  \r\n    setPicture() {\r\n      const temperatures = this.weatherData.hourly.temperature_2m;\r\n      const highestTemperature = Math.max(...temperatures);\r\n      \r\n      if (highestTemperature > 11) {\r\n        this.weatherImage = 'assets/IMG_0287.jpg';\r\n      } else {\r\n        this.weatherImage = 'assets/IMG_8637.JPG';\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}